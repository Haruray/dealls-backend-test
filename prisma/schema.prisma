// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Membership {
  FREE
  VERIFIED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String     @id @default(cuid())
  email                String     @unique
  name                 String?
  password             String
  nickname             String?
  gender               Gender?
  birthdate            DateTime?
  photo                String?
  interests            String?
  membership           Membership @default(FREE)
  membershipValidUntil DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt

  // Relations
  swipes   SwipeHistory[] @relation("UserSwipes")
  swipedAt SwipeHistory[] @relation("UserBeingSwipedAt")

  matches     Match[] @relation("CurrentUserMatched")
  matchedWith Match[] @relation("MatchedUser")

  payments PaymentHistory[]
}

model SwipeHistory {
  id           String   @id @default(cuid())
  date         DateTime @default(now())
  userId       String
  user         User     @relation("UserSwipes", fields: [userId], references: [id])
  swipedUserId String
  swipedUser   User     @relation("UserBeingSwipedAt", fields: [swipedUserId], references: [id])
  liked        Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Match {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  userId        String
  user          User     @relation("CurrentUserMatched", fields: [userId], references: [id])
  matchedUserId String
  matchedUser   User     @relation("MatchedUser", fields: [matchedUserId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PaymentHistory {
  id            String         @id @default(cuid())
  date          DateTime       @default(now())
  title         String
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  paymentId     String?
  amount        Float
  paymentStatus PaymentStatus?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
